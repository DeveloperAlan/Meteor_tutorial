#### Notes from FrontEndMasters Meteor course

# Meteor Notes

## Setup

Installing Meteor: [Meteor installation page](https://www.meteor.com/install)
> Follow the setup that Meteor provides, depending on your operating system.

## Creating a new Meteor app on your computer

Go to the directory that you would like to save the Meteor app. Open that particular folder in terminal and type: `meteor create` and then the app name. So in this instance it would be `meteor create app` or `meteor create reddit`.

Type in `ls` or `dir` to see that the app is inside the folder and then you can `cd` into the Meteor app directory


## What is inside the meteor directory

You should get something inside the meteor app folder something like this

> app
> > client
> > > main.css
> > > main.html
> > > main.css

> > package.json

> > server
> > > main.js

## Starting the application

Just type in `meteor` in the terminal, and the application would start up.

>If you get an error that says `Error: The babel-runtime npm package could not be found in your node_modules`, just install it by typing in:
>>`meteor npm install --save babel-runtime`


>If you get an error that it can't listen on port 3000, you can run it on another port. In this instance I want to use the port 4000, just type:
>>`meteor -p 4000`

>to run the meteor app on port 4000


One of the greatest things about meteor is that you don't need to refresh the page manually. The Meteor packages that have been installed already can do this for you.


## Using Templates

If you look inside the client/main.html file, you can see that is not a normal HTML page. Although you got a HEAD and BODY section, you don't have the HTML tags or any META tags that you would normally need for a HTML page. That's because Meteor would automatically do this for you when you launch the server. In more technical terms, Meteor actually takes this HTML file and compiles the HTML file to be more readable to the browswer.

You can also see another tag inside the HTML file that there is a template tag. A template is just a unit of the User Interface (UI). An analogy of a template in Meteor is a function in a JavaScript class. Both JavaScript function and Meteor Templates organise code structure and functionalities.

For this example, let's delete the existing code and leave the empty head and body tags and create a template called 'Layout'. We can place anything inside the template that is HTML, for example a `<h1>` tag.

To use the template tag, we need to use a templating engine to render the template on the browser, as the browswer doesn't know how to render the template by itself. One templating engine we could use is Spacebars, Meteor's own templating engine. This templating engine is close to Jade and Handlebars.

So one thing we can tell Spacebars to do is to render out the Layout template. In the documentation for Spacebars, you can render out the template by typing `{{> Layout}}`. The opening and closing `{{}}` is for Spacebars to recognize that it is Spocebars syntax, the carrot symbol is the inclusion operator so that Spacebars knows we need to add something to the page and the Layout name is to use the Layout template. This entire syntax is called the inclusion helper.

The resulting code should look like this:

> Code - main.html
```
<head>
  <title>app</title>
</head>
<body>
  {{> Layout}}
</body>
<template name="Layout">
  <h1>Alan's Meteor site</h1>
</template>
```

One feature that reddit has is the comment section. We can create the comment section by using a different helper called the block helper. A helper is a function or a class that gives you some functionality which isn't the main goal of the application. One example of a helper is a function that returns the Date. Another can be a class that adds certain numbers. You can use any of the Spacebar helpers anywhere, doesn't have to be in the body as it can be in the template itself.

We can call a function that Meteor provides to us called 'each'. What this function does it that it will iterate over a list of items and then will print out the items according to what the list contains.

So inside of the template, we can iterate over the list by typing

> Code - main.html
```
<ul>
{{#each items}}
  <li>Something that we haven't discovered yet, dw about it</li>
{{else}}
  <li>There's nothing in this list yet</li>
{{/each}}
```

Spacebars and other templating libraries have the same logic as JavaScript but not all templating library has the same syntax as JS. One of the templating engines called EJS, which we won't cover in this course.

The above code looks much alike a if statement, instead it's looking if the variable items has any items inside. If so, print out the line depending on how many items there is, otherwise print that there is nothing in the item if there's no items.

The resulting code should look like this:

```
<head>
  <title>app</title>
</head>

<body>
  {{> Layout}}
</body>

<template name="Layout">
  <h1>Alan's Meteor site</h1>

  <ul>
  {{#each items}}
    <li>lol</li>
  {{else}}
    <li>Damnit there's nothing</li>
  {{/each}}
  </ul>
</template>
```

Notice that we don't have a variable items anywhere in our HTML file. We'll have to add that manually in a JS file called main.js inside the client folder. This is where all the JavaScript files are that are given to the client.

You can delete everything inside of the main.js file.

To render out some items inside of the HTML page based on the items inside the items object, you'll need to reference the Layout that's inside the HTML page. Start typing in `Template.Layout`, which would reference the Template object and get the Layout instance inside of the Template object.

Since we are using helpers, we'll need to reference the helpers object inside of Template Layout which Meteor would automatically pick up. We can create any function we would want, but since we are saying in the HTML file to use the each helper over the items object, we can call the function 'items'. That function can return an array of items.

Example can be something like this:
```
Template.Layout.helpers({
  items: function() {
    return [
      "Peanut Butter",
      "Strawberry Jam",
      "Nutella"
    ]
  }
})
```

When you save and refresh the browser, you can see that the number of times that it has printed the hardcoded HTML code is the same number of items inside the items helper function, which is three. 

If we want to display the foods onto the webpage. we can use the Spacebars syntax to render out all the items. Instead of using the hardcoded code inside the each block helper, we can use the {{}} syntax and type in what we need to render. In this case, we can use {{items}} to fill in the <li> tag.

The HTML code should look something like this:
```
<template name="Layout">
  <h1>Alan's Meteor site</h1>

  <ul>
  {{#each items}}
    <li>{{items}}</li>
  {{else}}
    <li>Damnit there's nothing</li>
  {{/each}}
  </ul>
</template>
```

When we save the file and checkout the page, we can see that the items are being rendered to the page, except this time all the items are being printed on the same line and each HTML list item is being print as many as there is items. This is because we told the Spacebars compiler to print out all the items rather than each individual item. To print each individual item, we'll need to change up the JavaScript and HTML file to do so.

Inside of the JavaScript file you can change the value inside the array of the return statment into an array of objects, known in Meteor as a data context (but I called them just normal JavaScript objects). So from:
```
return [
      "Peanut Butter",
      "Strawberry Jam",
      "Nutella"
]
```

turns into
```
return [
      { item: "Peanut Butter"},
      { item: "Strawberry Jam"},
      { item: "Nutella"}
]
```

Now we can reference the key/property `item` inside of the objects. In the HTML file in the each block helper we can now change from `<li>{{items}}</li>` to `<li>item</li>`

The final code should look similar to this
```
> main.js
Template.Layout.helpers({
  items: function() {
    return [
      { item: "Peanut Butter"},
      { item: "Strawberry Jam"},
      { item: "Nutella"}
    ]


  }
})
```

```
> main.html 
<head>
  <title>app</title>
</head>

<body>
  {{> Layout}}
</body>

<template name="Layout">
  <h1>Alan's Meteor site</h1>

  <ul>
  {{#each items}}
    <li>{{item}}</li>
  {{else}}
    <li>Damnit there's nothing</li>
  {{/each}}
  </ul>
</template>
```

When you save the files and go back to your browser, you'll see the web page being updated and the items in their own list item.

You can add as many key values as you want, such as dates, username, messages, chatrooms, etc. All you need to do is to add that inside of the block helper return statement and add that reference to the HTML file

Just realise that the items function we passed in is a helper itself, so in JavaScript we can kind of model the function call like this:
```
each(items())
```

We do a function call to the items and with the answer that it returned for us we will use that as a parameter for the each function. The each helper is provided by Meteor and the items helper is a function that we created ourselves.


## Creating collections
We can create real data inside our Meteor app rather than hard coding it so that other people can use our app. To do this we need to use a database called MongoDB which is provided by Meteor out of the box.

[MongoDB](https://www.mongodb.com/) is a free and open source document-oriented database. MongoDB is a NoSQL database, meaning it would use JSON-like documents, much like the JavaScript object we have been doing. The main thing that MongoDB does (as well as other database technologies) is to store information, like user data, files, and data entries. Databases strengths are to update information dynamically and able to do it regularly, unlike static files like JavaScript.

To create a database, MongoDB and Meteor provides a table called collection. We can can create this by typing. 

```
Items = new Mongo.Collection('items');
```

When we create this collection, we've placed this in the client main.js, meaning that this database would only be executed in the client's browser and not in the server. We will cover this shortly.

Once you saved the file, the browser will automatically refresh the page and if you take a peak at the console and type the name of the collection (in this instance, `Items`), you can see what the MongoDB collection contains, such as methods you can use to retrieve information back to you. One of the function is called `find`. When you execute the find command (`Items.find()`), the browser will return the cursor. This command represents a query that we can execute to the database and not to the app we created itself. If we did the following command 

```
cursor = Items.find()
cursor.fetch()
```

you would see an empty array in the console, this is because we haven't actually added in any information into the database as of yet. However, it is the same type of array that we used in the items helper to return the food items.

So now, instead of returning the hardcoded food items inside the main.js code, we can return the cursor. The code should look like this:
```
Template.Layout.helpers({
    items: function() {
        return Comments.find();
    }
})
```

Remember that when we did the Items.find() and assigned that value to the variable cursor, that it is a regular JavaScript object with additional functions.

When we save and refresh the page, remember that there is no items in the collection, hence there is no items displayed. We can insert some data by going into the Chrome Developer tools console, which is only a debugging feature and not used in production websites. To insert an item inside the database, you would need to type this in the JavaScript console.

```
Items.insert({item: "This is item 1"})
```

When we press enter you should see the following id for the particular insert, and also a log where it says: `insert failed: Method '/items/insert' not found`. 

To dive into a little theory here, the code that we entered inside the developer console adds another item to the database, this being a new item. Meteor provides to us two databases, one for the client and one for the server. The server database is running MongoDB and the client database is a variant of MongoDB called minimongo. The server database is the one that's the most important part of the web application, because that will contain all the user, personal and content data. The client database isn't a copy of the server database. What the client database does it have a relative copy of the server database. Meaning that the client only takes information that is needed for the page to run. For example, if the user is in the content page, the user won't need to have the user profile running with all the settings. Rather the web page would only request items that is in the content page. 

TL:DR The client is running a slimmed down version of the server database which is updated whenever the server database is updated.

You should notice by now that there is a server folder inside the web app. Inside that server folder is a main.js file. We would need to add a server database here. Inside the `Meteor.startup` function, add the following code:
```
Meteor.startup(() => {
  Items = new Mongo.Collection('items');
});
```

This will add the MongoDB server database to the Meteor server app. Now the client minimongo database can now communicate with the backend server, which contains MongoDB itself. 

Since minimongo is reliant on the server's MongoDB, we can now insert the collection into the JavaScript console in our web app. You can now type in the following command inside the Chrome developer tools:
```
Items.insert({item: "This is item 1"})
```

When you enter the following command you would notice that the web page/user interfaceinstantly updated with your command. Pretty cool huh?

This works by saving the function call that you've typed inside the Chrome Developers tools which saves the information into minimongo (which the database for minimongo goes on the client side). Minimongo accepts this request and then asks the server database to save this information so all the client can now view this information. Again, this only works when the client and the server has their respective database.

This is called a reactive interface, where the user interface updates in response to the change in data from the client/server database. 

This is partially thanks the the function `Items.find()`, which is the reactive variable/source. This reactive variable (Items.find()) changes when the data changes.

Although there is a reactive variable, we also need to do something with the reactive variable, such as to render out the variable or to use the variable to compute/calculate a formula, or anything between those lines. Inside the `Template.Layout.helper` is a function that returns the Items.find() (the reactive variable), hence it would show/render the variable in the web page. This is called reactive computations. A reactive computation is simply a block of code that will re-run whenever a reactive data-soruce inside it changes.

You can enter as many commands as you want inside the Chrome Developer Tools, as MongoDB knows that you are inserting another item in the list without deleting the last item in the list. So if you did:

```
Items.insert({item: "This is item 2"})
```

you will see item 1 and item 2. If you need to reset the database you can close the server and then type `meteor reset` to clear the database with no items.

##Handling Events
It's pretty cool that we can add items using the Chrome Developer Tools. However, for a normal user to use the website, they would need some sort of input or form of some kind to use to add a item to the list. In HTML you can use a form element to create a form and inputs to create form elements for the form. For example, you can create a input text field and a submit button for a form. That particular form, when the button is clicked, will submit whatever is inside the input text field into the list that is displayed in the page.

We can do this by creating another template inside our HTML page which can take user input. Start by creating the template itself with the name `ItemForm`. Inside that template, you would need to add the `<form>` tag with two inputs. One input is going to be the text field to add our form input, and the other is the submit button to submit the form into our list.

```
<template name="ItemForm">
  <form>
    <input type="text" name="item" autoFocus placeholder="Add an item..." />
    <input type="submit" value="Add" />
  </form>
</template>
```

Remember just like with all Meteor templates, we will need to call the template as well to render the template on the page. `{{> ItemForm}}`

Currently, when we type something inside of the text field and we submit by clicking the submit button, it currently doesn't do anything because of HTML. Right now, when we submit, the HTML page refreshes and the URL link adds the `?item=item1` to the end of the URL. This is not Meteor specific as its more of a HTML standard that most web servers and clients use, especially when submitting a form.

However, we would like to get this working. To do this, we would need to define an event handler that would handle the page when it an event fires. In this case, we want to fire a function when the user submits the form. 

To do this, we would need to go into our `client/main,js` and add the following below our current code:

tmpl represents an object of the instance of the template on the page
```
Template.ItemForm.events({
  'submit form': function(e, tmpl) {
    e.preventDefault();

    var form = tmpl.find('form');
    var itemEl = tmpl.find('[name=item]');
    var item = itemEl.value;

    Items.insert({
      item: item
    })

    form.reset()
  }
})
```

> Note: if you ever get confused about the code, you can always throw the `debugger` statement in the code to see whats happens. For example, if you through the `debugger` after the `e.preventDefault()`, in the console, you can type `e` or `tmpl` to see whats happening! 

> Also check out the MDN documentation on all the JavaScript events, like submit and click!

When we save the code and then go back to our browser for refresh, we can enter the values that we want inside of the input text and when we click on the `Add` button, it would add the item to the list. You can keep adding items to the list and the items would still remain in the list. Refreshing the page would also keep the list there.

Another thing you could do for Meteor which shows the great power of Meteor is to create another tab of Meteor (done by just creating another tab/window in Chrome and just going back to `locahost`), and place them side by side. When you submit an item in the form, both lists on both of those tabs will update. One of the magical things of Meteor is that when one client adds/creates something, it will get sent to the server and the server will send up the required updates that it has received, and this goes for all the clients. This would happen as long as all the clients have an internet connection up with the website. 

Just note that events and helpers are two seperate things in Meteor and in JavaScript/Web Development in general. A helper is a function that is defined by the user or a language, like `Math.floor()`. Events ia a type of helper that is executed when a certain thing happens on the HTML page/DOM. So for instance: When a button is clicked, send the form. Hence, the browswer is the one that executes all the event functions you define and the helpers we can call whenever we want to in our code.

If we ever need to create a non-persistant minimongo database for our client, that is, that would not communicate with the server at all. We can simply just create a mongo.collection that only exist in the client, rather than both the server and the client. That particular collection name can be anything, including null, since it is not being references from the server.

##Adding Packages
Meteor package management system works just like NPM. You can install other people's created packages like jQuery or a whole application into your Meteor project. It works just like NPM, as it piggybacks most of the internals and engineering from NPM, so it works just the way you learn NPM.

One of the packages we going to add is MomentJS. MomentJS is a time/data formatter which essentially prettifies all the dates and times. We can install Moment by going to the Atmosphere website which contains all the Meteor packages that we want. Just search momentjs in the search bar on the website or you can also search it using the termainl by typing `meteor search momentjs` and the computer would tell you where to find it. You can also use `meteor show momentjs:moment` to then show whats the momentJS details. 

To install, you can then use `meteor add momentjs:moment`, which would then add it to your meteor project files. To list all the installed moment files, just type in `meteor list`. You can also update meteor packages by typing `meteor update`.

We're going to add the date to the items, since items should have a timestamp of when they have been submitted to the app's database. To do this we would need to add a property to the items Collection as well as a way to display this on the HTML. So inside our `client/main.js` file, we would need to edit the following:
```
Items.insert({
  item: item,
  timestamp: new Date
})# 
```

and inside the `main.html` file:
```
{{#each items}}
    <li>
      <p>{{item}}</p>
      <p>{{timestamp}}</p>
    </li>

{{else}}
```

We would also need to reset our server in order for the timestamp to show up in the web page. To do this, we need to shutdown our server by going on the terminal and clicking Control+C. We can then reset the database by typing `meteor reset` in our apps' directory. We then need to start the server again by typing in `meteor`. 

We should see that there is nothing on the webpage because we have cleared our dtabase. Let's add an item by typing an item into the input text field. You should now see that there is the item name as well as the date for when we added our item.

Now we should realise the the date looks kind of messy, nothing that website that Facebook and Reddit would display in their web apps when it comes to dates. That's because JavaScript has a way to format timestamps in it's own way, because some developers would like to have all the information for them to use, such as the timezone of what time is displayed and/or the seconds that is displayed. 

Since we added the meteor package to our meteor app, we can now set up the timestamp that we want to be displayed.

##Formatting a Timestamp
Since `formatTimestamp` is a function that doesn't need to be formatted when an event (such as a button event) is fired (since we can use formatTimestamp even when the button isn't clicked), `formatTimestamp` would be a helper function. We would need to add the following code to `client/main.js`
```
Template.Layout.helpers({
  items: function() {
    return Items.find()
  }
  formatTimestamp: function(timestamp) {
    
  }
})
```

There is a difference between the `items` and the `formatTimestamp` helper function. The formatTimestamp takes a parameter so that it can use the timestamp to render out a timestamp with the information that we want displayed.

Say we do the following:
```
formatTimestamp: function(timestamp) {
  debugger
}
```

and we refresh the page. We should see Chrome show the debugger tool to us. This allows us to show what's happening inside the context of the code at where we are in reading the line of code. If we type `this` inside the Chrome console, we would be given the attributes of the item itself and it's properties, such as the item name and the timestamp. The this object will always point to the current object or instance of a class, not a function or a variable.

If we type in `this.timestamp` inside the debugger console, we would get the object timestamp back. Note that `this.timestamp` isn't the timestamp that is being referred from the arguments that we have called, but in the CommentList object. If we want to look what we are getting from the arguments, we can use the `arguments` object inside the debugger console to get the array of arguments that we have passed in as parameters.

We can now format the timestamp that we want by typing in the following to change the timestamp that we are passing in:
```
formatTimestamp: function(timestamp) {
  return moment(timestamp).calendar()
}
```

We are using the moment function that was given to us when we installed the MomentJS package. Moment takes one parameter, being the timestamp, which we can then using another function to format the timestamp. We can use the calendar function to give us the time of when we posted our comment if the comment was posted on the same day as today, or a calendar for any other day. We know this calendar function because we can look inside the Moment documentation and see what the function would do. 

It might be the first time you saw what the dot notation does, as we can concatenate two function together to give back one result. The equivalent and more verbose version of this particular functionality is:
```
formatTimestamp: function(timestamp) {
  var newTimestamp = moment(timestamp)
  return newTimestamp.calendar()
}
```

The `moment(timestamp)` will return an object when the function has finished executing. Hence, we can use that returned object to create a new formatted timestamp.

## Understanding HTTP
One of the core technologies behind Meteor is HTTP. How this works is that a client/browser sends out a request to the server, using a text known as Hypertext Transfer Protocol (HTTP). The server will then send back HTTP again depending on what the client wants to do. The HTTP sends back a header and a body which contain information to tell what the browser does. The body usually contains HTML (if its a HTML file) or JS (if its a JavaScript file) and the header will give information on the information about the file, such as status and what type of file it is.

To show you how to check what's happening during the HTTP processs, type in `curl -i http://127.0.0.1:3000` in the terminal and the computer would make a request to the server. The server would give back a HTTP response. It would bring back a status code of 200. It would give back some other header information such as the content type, date, etc. It will then also give the body, which should be the HTML. The browser will know how to render out this page from the HTTP response.

Note: that the body is empty in the curl, we will see how that works in meteor.

If you view the page source in Chrome you can see that's the same from the curl response that we had from the terminal. These script tags you can see from the view source is from the Meteor engine. These script tags represents a client package from meteor that we have installed, which would then render on the HTML page when the page is loaded. For example, we have mongo, DDP and minimongo as well as momentjs from a third party source. Mongo, DDP and the rest of the packages that comes with Meteor are core packages, packages that are made by the meteor team.

## HTTP and Polling
The thing is with HTTP is that it is quite a old protocol, since it's been created when the internet was born. This was great during the early days, but gradually we got applications like Gmail and Facebook which would update our page everytime there is a change to the page that is needed, or a server wants to update our page. 

Normally you could just refresh your page and you can get the newest information from the browser, but the people at Microsoft decided to create a technology known as AJAX (asynchronous JavaScript and XML), so we could use JavaScript to send a HTTP request to the server. This was great because we could use JavaScript anytime to send a request to the server rather than refreshing the page. Instead of clicking a button to ask for new data from the server, we could actually create a for loop which would keep asking for data for us. This is called polling

## Web Sockets & DDP
It's pretty frustrating that every time we have to keep calling the server for data and the server would have to respond everytime we have to send something back to the client. So the tech companies created something called web sockets, which instead just have a connection open (much like a game or a messaging app) which opens up a data connection between the client and the server so it doesn't have to close and restart the request again.






































