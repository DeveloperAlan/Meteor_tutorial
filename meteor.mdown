#### Notes from FrontEndMasters Meteor course

# Meteor Notes

## Setup

Installing Meteor: [Meteor installation page](https://www.meteor.com/install)
> Follow the setup that Meteor provides, depending on your operating system.

## Creating a new Meteor app on your computer

Go to the directory that you would like to save the Meteor app. Open that particular folder in terminal and type: `meteor create` and then the app name. So in this instance it would be `meteor create app` or `meteor create reddit`.

Type in `ls` or `dir` to see that the app is inside the folder and then you can `cd` into the Meteor app directory


## What is inside the meteor directory

You should get something inside the meteor app folder something like this

> app
> > client
> > > main.css
> > > main.html
> > > main.css

> > package.json

> > server
> > > main.js

## Starting the application

Just type in `meteor` in the terminal, and the application would start up.

>If you get an error that says `Error: The babel-runtime npm package could not be found in your node_modules`, just install it by typing in:
>>`meteor npm install --save babel-runtime`


>If you get an error that it can't listen on port 3000, you can run it on another port. In this instance I want to use the port 4000, just type:
>>`meteor -p 4000`

>to run the meteor app on port 4000


One of the greatest things about meteor is that you don't need to refresh the page manually. The Meteor packages that have been installed already can do this for you.


## Using Templates

If you look inside the client/main.html file, you can see that is not a normal HTML page. Although you got a HEAD and BODY section, you don't have the HTML tags or any META tags that you would normally need for a HTML page. That's because Meteor would automatically do this for you when you launch the server. In more technical terms, Meteor actually takes this HTML file and compiles the HTML file to be more readable to the browswer.

You can also see another tag inside the HTML file that there is a template tag. A template is just a unit of the User Interface (UI). An analogy of a template in Meteor is a function in a JavaScript class. Both JavaScript function and Meteor Templates organise code structure and functionalities.

For this example, let's delete the existing code and leave the empty head and body tags and create a template called 'Layout'. We can place anything inside the template that is HTML, for example a `<h1>` tag.

To use the template tag, we need to use a templating engine to render the template on the browser, as the browswer doesn't know how to render the template by itself. One templating engine we could use is Spacebars, Meteor's own templating engine. This templating engine is close to Jade and Handlebars.

So one thing we can tell Spacebars to do is to render out the Layout template. In the documentation for Spacebars, you can render out the template by typing `{{> Layout}}`. The opening and closing `{{}}` is for Spacebars to recognize that it is Spocebars syntax, the carrot symbol is the inclusion operator so that Spacebars knows we need to add something to the page and the Layout name is to use the Layout template. This entire syntax is called the inclusion helper.

The resulting code should look like this:

> Code - main.html
```
<head>
  <title>app</title>
</head>

<body>
  {{> Layout}}
</body>

<template name="Layout">
  <h1>Alan's Meteor site</h1>
</template>
```

One feature that reddit has is the comment section. We can create the comment section by using a different helper called the block helper. A helper is a function or a class that gives you some functionality which isn't the main goal of the application. One example of a helper is a function that returns the Date. Another can be a class that adds certain numbers. You can use any of the Spacebar helpers anywhere, doesn't have to be in the body as it can be in the template itself.

We can call a function that Meteor provides to us called 'each'. What this function does it that it will iterate over a list of items and then will print out the items according to what the list contains.

So inside of the template, we can iterate over the list by typing

> Code - main.html
```
<ul>
{{#each items}}
  <li>Something that we haven't discovered yet, dw about it</li>
{{else}}
  <li>There's nothing in this list yet</li>
{{/each}}
```

Spacebars and other templating libraries have the same logic as JavaScript but not all templating library has the same syntax as JS. One of the templating engines called EJS, which we won't cover in this course.

The above code looks much alike a if statement, instead it's looking if the variable items has any items inside. If so, print out the line depending on how many items there is, otherwise print that there is nothing in the item if there's no items.

The resulting code should look like this:

```
<head>
  <title>app</title>
</head>

<body>
  {{> Layout}}
</body>

<template name="Layout">
  <h1>Alan's Meteor site</h1>

  <ul>
  {{#each items}}
    <li>lol</li>
  {{else}}
    <li>Damnit there's nothing</li>
  {{/each}}
  </ul>
</template>
```

Notice that we don't have a variable items anywhere in our HTML file. We'll have to add that manually in a JS file called main.js inside the client folder. This is where all the JavaScript files are that are given to the client.

You can delete everything inside of the main.js file.

To render out some items inside of the HTML page based on the items inside the items object, you'll need to reference the Layout that's inside the HTML page. Start typing in `Template.Layout`, which would reference the Template object and get the Layout instance inside of the Template object.

Since we are using helpers, we'll need to reference the helpers object inside of Template Layout which Meteor would automatically pick up. We can create any function we would want, but since we are saying in the HTML file to use the each helper over the items object, we can call the function 'items'. That function can return an array of items.

Example can be something like this:
```
Template.Layout.helpers({
  items: function() {
    return [
      "Peanut Butter",
      "Strawberry Jam",
      "Nutella"
    ]
  }
})
```

When you save and refresh the browser, you can see that the 
